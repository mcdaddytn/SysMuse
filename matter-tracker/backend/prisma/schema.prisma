// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model TeamMember {
  id           String        @id @default(cuid())
  name         String
  email        String        @unique
  workingHours Int           @default(40)
  timeIncrementType TimeIncrementType @default(PERCENT)
  timeIncrement     Int               @default(1)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  timesheets   Timesheet[]
  itActivities ITActivity[]
}

model Client {
  id          String    @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  matters     Matter[]
}

model Matter {
  id          String          @id @default(cuid())
  name        String
  description String?
  clientId    String
  client      Client          @relation(fields: [clientId], references: [id])
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  tasks       Task[]
  entries     TimesheetEntry[]
  itActivities ITActivity[]
}

model Task {
  id          String          @id @default(cuid())
  description String
  matterId    String
  matter      Matter          @relation(fields: [matterId], references: [id])
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  entries     TimesheetEntry[]
  itActivities ITActivity[]
  
  @@unique([matterId, description])
}

model Timesheet {
  id           String          @id @default(cuid())
  teamMemberId String
  teamMember   TeamMember      @relation(fields: [teamMemberId], references: [id])
  startDate         DateTime
  dateIncrementType DateIncrementType @default(WEEK)
  timeIncrementType TimeIncrementType @default(PERCENT)
  timeIncrement     Int               @default(1)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  entries      TimesheetEntry[]
  
  @@unique([teamMemberId, startDate, dateIncrementType], name: "teamMemberId_startDate_dateIncrementType")
}

model TimesheetEntry {
  id             String    @id @default(cuid())
  timesheetId    String
  timesheet      Timesheet @relation(fields: [timesheetId], references: [id], onDelete: Cascade)
  matterId       String
  matter         Matter    @relation(fields: [matterId], references: [id])
  taskId         String?
  task           Task?     @relation(fields: [taskId], references: [id])
  taskDescription String
  urgency        Urgency   @default(MEDIUM)
  projectedTime  Int       // stored as percentage (0-100) or minutes depending on timeIncrementType
  actualTime     Int       // stored as percentage (0-100) or minutes depending on timeIncrementType
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  // Reference to the IT activity that created this entry (if any)
  sourceITActivityId String?
  sourceITActivity   ITActivity? @relation(fields: [sourceITActivityId], references: [id])
  
  @@unique([timesheetId, matterId, taskDescription])
}

// New IT Activity table to track Outlook, Email, and OneDrive activities
model ITActivity {
  id              String           @id @default(cuid())
  teamMemberId    String
  teamMember      TeamMember       @relation(fields: [teamMemberId], references: [id])
  
  // Common fields for all activity types
  activityType    ITActivityType   // CALENDAR, EMAIL, DOCUMENT
  title           String           // Subject/title/filename
  description     String?          // Body/content preview
  startDate       DateTime         // When the activity occurred/was created
  endDate         DateTime?        // For calendar events only
  
  // Activity-specific metadata stored as JSON
  metadata        Json?            // Store additional type-specific data
  
  // Optional association with matter/task (set when user associates manually)
  matterId        String?
  matter          Matter?          @relation(fields: [matterId], references: [id])
  taskId          String?
  task            Task?            @relation(fields: [taskId], references: [id])
  
  // Duration set by user when associating with task (in minutes)
  durationMinutes Int?
  
  // Track if this activity has been converted to a timesheet entry
  isAssociated    Boolean          @default(false)
  
  // One-to-many relation: one IT activity can create multiple timesheet entries
  timesheetEntries TimesheetEntry[]
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  @@index([teamMemberId, startDate])
  @@index([activityType, startDate])
}

enum TimeIncrementType {
  PERCENT
  HOURS_MINUTES
}

enum DateIncrementType {
  DAY
  WEEK
}

enum Urgency {
  HOT
  MEDIUM
  MILD
}

enum ITActivityType {
  CALENDAR    // Outlook calendar events
  EMAIL       // Emails sent
  DOCUMENT    // OneDrive documents created/modified
}