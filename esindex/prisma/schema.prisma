// This is the initial code file outlining the import/index and BM25 term extraction
// with MySQL + Prisma + Elasticsearch for keyword/phrase suggestion.

// === 1. Prisma schema (schema.prisma) ===
// Run `npx prisma init` first and replace the content of schema.prisma:

// schema.prisma
// ---
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}


// Enums
enum DocType {
  OTHER
  ESJSON
  TEDTALK
  ENRONEMAIL
}

enum DocFieldType {
  STRING
  NUMBER
  LONGTEXT
  DATE
  JSON
  URL
  OTHER
}

enum ESIndexType {
  KEYWORD
  TOKEN
  NONE
}

enum DocSetExhSearchSelectMode {
  MINHITS
  MAXHITS
  RANDOM
}

enum DocSetExhSearchEvalMode {
  INCMIN
  INCMAX
}

enum TopSearchTermMode {
  LITERAL
  WORDRATIO
  DISTINCTRATIO
}

enum TermSearchType {
  KEYWORD
  PHRASE
}

enum TermBoostMode {
  EXACT
  CONTAINS
}

enum SearchLogicOperator {
  AND
  OR
}

enum CorpusOperationType {
  CORPUSSNAPSHOT
  SETUNION
  SETINTERSECTION
  ESKEYWORDSEARCH
  ESJSONSEARCH
  ESJSONFILESEARCH
  ESSEARCHTERMTEST
  GENDSEXHQUERY  
}

model Corpus {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  createdAt    DateTime      @default(now())
  
  // New fields and relationships
  corpusTypeId Int?
  corpusType   CorpusType?   @relation(fields: [corpusTypeId], references: [id])
  
  // Existing relationships
  documents    Document[]
  
  // New relationships
  setOperations    CorpusSetOperation[]
  documentSets     CorpusDocumentSet[]
  stopwords        Stopword[]
}

model Document {
  id                Int               @id @default(autoincrement())
  corpusId          Int
  content           String            // Could be message (enron) or transcript (TED)
  esId              String            // Corresponding Elasticsearch ID
  createdAt         DateTime          @default(now())
  docLength         Int               // number of characters
  wordCount         Int
  distinctWordCount Int
  avgWordLength     Float

  corpus            Corpus            @relation(fields: [corpusId], references: [id])
  terms             SearchTerm[]
  
  // New relationships
  documentTypeId    Int?
  documentType      CorpusDocumentType? @relation(fields: [documentTypeId], references: [id])
  documentSets      SetDocument[]
}

model SearchTerm {
  id               Int      @id @default(autoincrement())
  term             String
  bm25             Float
  tf               Int      // term freq
  df               Int      // doc freq
  termLength       Int
  termLengthRatio  Float
  adjbm25          Float
  termType         TermSearchType @default(KEYWORD)
  createdAt        DateTime @default(now())
  
  docId            Int
  document         Document @relation(fields: [docId], references: [id])
  
  // New relationship
  fieldId          Int?
  field            DocumentTypeField? @relation(fields: [fieldId], references: [id])

  @@unique([term, docId])
}

model Stopword {
  id         Int      @id @default(autoincrement())
  term       String
  category   String
  createdAt  DateTime @default(now())
  
  // New relationship
  corpusId   Int?
  corpus     Corpus?  @relation(fields: [corpusId], references: [id])

  @@unique([term, category])
}

model TermBoostCategory {
  id              Int         @id @default(autoincrement())
  name            String      @unique
  boost           Float       @default(1.0)
  createdAt       DateTime    @default(now())
  
  termBoosts      TermBoost[]
}

model TermBoost {
  id              Int            @id @default(autoincrement())
  term            String
  boost           Float          @default(1.0)
  boostMode       TermBoostMode  @default(EXACT)
  createdAt       DateTime       @default(now())
  
  categoryId      Int
  category        TermBoostCategory @relation(fields: [categoryId], references: [id])
  
  @@unique([term, categoryId])
  @@index([term])
}

model CorpusType {
  id              Int                 @id @default(autoincrement())
  name            String              @unique @db.VarChar(255)
  description     String?             @db.Text
  defaultMetadata Json?
  createdAt       DateTime            @default(now())
  
  corpora         Corpus[]
  documentTypes   CorpusDocumentType[]
  defaultDocTypeId Int?
  defaultDocType   CorpusDocumentType? @relation("DefaultDocType", fields: [defaultDocTypeId], references: [id])
}

model CorpusDocumentType {
  id          Int         @id @default(autoincrement())
  name        String      @unique @db.VarChar(255)
  docType     DocType     @default(OTHER)
  createdAt   DateTime    @default(now())
  
  corpusTypeId Int
  corpusType   CorpusType @relation(fields: [corpusTypeId], references: [id])
  
  documents    Document[]
  fields       DocumentTypeField[]
  
  // For optional default relationship
  defaultFor   CorpusType[] @relation("DefaultDocType")
}

model DocumentTypeField {
  id            Int          @id @default(autoincrement())
  name          String       @db.VarChar(255)
  fieldType     DocFieldType @default(STRING)
  esIndexType   ESIndexType  @default(NONE)
  createdAt     DateTime     @default(now())
  
  documentTypeId Int
  documentType   CorpusDocumentType @relation(fields: [documentTypeId], references: [id])
  
  searchTerms    SearchTerm[]
  
  @@unique([documentTypeId, name])
}

model CorpusSetOperation {
  id                Int                 @id @default(autoincrement())
  name              String              @db.VarChar(255)
  searchType        CorpusOperationType @default(CORPUSSNAPSHOT)
  operationText     String?             @db.Text
  operationDelimiter String?            @db.VarChar(50)
  createdAt         DateTime            @default(now())
  
  corpusId          Int
  corpus            Corpus              @relation(fields: [corpusId], references: [id])
  
  documentSets      CorpusDocumentSet[]
  
  @@unique([corpusId, name])
}

model CorpusDocumentSet {
  id                Int                 @id @default(autoincrement())
  name              String              @db.VarChar(255)
  createdAt         DateTime            @default(now())
  
  corpusId          Int
  corpus            Corpus              @relation(fields: [corpusId], references: [id])
  
  operationId       Int
  operation         CorpusSetOperation  @relation(fields: [operationId], references: [id])
  
  documents         SetDocument[]
  metrics           SetMetrics?
  
  // New relationships
  exhaustiveSearches      DocSetExhaustiveSearch[]
  queryExecutions         ESQueryExecution[]
  
  @@unique([corpusId, name])
}

// Join table for many-to-many relationship
model SetDocument {
  id          Int               @id @default(autoincrement())
  createdAt   DateTime          @default(now())
  
  setId       Int
  documentSet CorpusDocumentSet @relation(fields: [setId], references: [id])
  
  documentId  Int
  document    Document          @relation(fields: [documentId], references: [id])
  
  metrics     DocumentMetrics?
  
  @@unique([setId, documentId])
}

model SetMetrics {
  id               Int               @id @default(autoincrement())
  wordCount        Int
  documentCount    Int
  avgWordCount     Float
  avgDocLength     Float
  distinctWordCount Int
  avgWordLength    Float
  createdAt        DateTime          @default(now())
  
  setId            Int               @unique
  documentSet      CorpusDocumentSet @relation(fields: [setId], references: [id])
}

model DocumentMetrics {
  id               Int          @id @default(autoincrement())
  relevanceScore   Float?       // For search operations
  rank             Int?         // Position in search results
  customMetrics    Json?        // For operation-specific metrics
  createdAt        DateTime     @default(now())
  
  setDocumentId    Int          @unique
  setDocument      SetDocument  @relation(fields: [setDocumentId], references: [id])
}

// New models for search functionality
model DocSetExhaustiveSearch {
  id                      Int                     @id @default(autoincrement())
  name                    String                  @db.VarChar(255)
  nextTermSelectMode      DocSetExhSearchSelectMode
  nextTermEvalMode        DocSetExhSearchEvalMode
  evalTermCount           Int                     @default(0)
  exhaustivenessThreshold Float                   @default(1.0)
  searchText              String                  @db.Text
  createdAt               DateTime                @default(now())
  
  corpusDocumentSetId     Int
  corpusDocumentSet       CorpusDocumentSet       @relation(fields: [corpusDocumentSetId], references: [id])
  
  // The resulting search
  resultSearchId          Int?
  resultSearch            ESSearch?               @relation(fields: [resultSearchId], references: [id])
  
  @@unique([corpusDocumentSetId, name])
}

// Base search model (MTI pattern)
model ESSearch {
  id                      Int                     @id @default(autoincrement())
  name                    String                  @db.VarChar(255)
  invert                  Boolean                 @default(false)
  createdAt               DateTime                @default(now())
  
  // Relationships
  termSearch              TermSearch?
  compoundSearch          CompoundSearch?
  
  // Executions of this search
  executions              ESQueryExecution[]
  
  // Used as result in exhaustive searches
  exhaustiveSearches      DocSetExhaustiveSearch[]

  // gm: added this, was not done by claude, 
  // Subqueries
  subqueries              CompoundSearchSubquery[]
}

// Term search model
model TermSearch {
  id                      Int                     @id @default(autoincrement())
  termSearchType          TermSearchType
  term                    String                  @db.VarChar(255)
  
  // ESSearch backlink
  searchId                Int                     @unique
  search                  ESSearch                @relation(fields: [searchId], references: [id])
}

// Compound search model
model CompoundSearch {
  id                      Int                     @id @default(autoincrement())
  logicOperator           SearchLogicOperator
  
  // ESSearch backlink
  searchId                Int                     @unique
  search                  ESSearch                @relation(fields: [searchId], references: [id])
  
  // Subqueries
  subqueries              CompoundSearchSubquery[]
}

// Join table for compound searches
model CompoundSearchSubquery {
  id                      Int                     @id @default(autoincrement())
  createdAt               DateTime                @default(now())
  
  compoundSearchId        Int
  compoundSearch          CompoundSearch          @relation(fields: [compoundSearchId], references: [id])
  
  subqueryId              Int
  subquery                ESSearch                @relation(fields: [subqueryId], references: [id])
  
  position                Int                     @default(0)
  
  @@unique([compoundSearchId, subqueryId])
  @@index([position])
}

// Link between search executions and result sets
model ESQueryExecution {
  id                      Int                     @id @default(autoincrement())
  executedAt              DateTime                @default(now())
  
  searchId                Int
  search                  ESSearch                @relation(fields: [searchId], references: [id])
  
  resultSetId             Int
  resultSet               CorpusDocumentSet       @relation(fields: [resultSetId], references: [id])
  
  // Metrics for this execution
  metrics                 QueryMetrics?
  
  @@unique([searchId, resultSetId])
}

// Query metrics
model QueryMetrics {
  id                      Int                     @id @default(autoincrement())
  hitsPerWord             Float
  hitsPerTerm             Float
  hitsPerQuery            Float
  wordCount               Int
  termCount               Int
  queryComplexity         Int
  createdAt               DateTime                @default(now())
  
  // Relation to execution
  executionId             Int                     @unique
  execution               ESQueryExecution        @relation(fields: [executionId], references: [id])
}


