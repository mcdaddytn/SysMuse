generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Trial {
  id                Int                @id @default(autoincrement())
  name              String
  caseNumber        String             @unique
  court             String
  courtDivision     String?
  courtDistrict     String?
  totalPages        Int?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  anonymousSpeakers AnonymousSpeaker[]
  courtReporter     CourtReporter?
  judge             Judge?
  jurors            Juror[]
  markers           Marker[]
  sessions          Session[]
  attorneys         TrialAttorney[]
  trialEvents       TrialEvent[]
  witnesses         Witness[]

  @@index([caseNumber])
}

model Judge {
  id        Int     @id @default(autoincrement())
  name      String
  title     String?
  honorific String?
  speakerId Int     @unique
  trialId   Int     @unique
  speaker   Speaker @relation(fields: [speakerId], references: [id], onDelete: Cascade)
  trial     Trial   @relation(fields: [trialId], references: [id], onDelete: Cascade)

  @@index([trialId])
}

model CourtReporter {
  id             Int       @id @default(autoincrement())
  name           String
  credentials    String?
  title          String?
  stateNumber    String?
  expirationDate DateTime?
  addressId      Int?
  phone          String?
  trialId        Int       @unique
  address        Address?  @relation(fields: [addressId], references: [id])
  trial          Trial     @relation(fields: [trialId], references: [id], onDelete: Cascade)

  @@index([trialId])
}

model Session {
  id                  Int          @id @default(autoincrement())
  trialId             Int
  sessionDate         DateTime
  sessionType         SessionType
  documentNumber      Int?
  fileName            String?
  totalPages          Int?
  transcriptStartPage Int?
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  pages               Page[]
  trial               Trial        @relation(fields: [trialId], references: [id], onDelete: Cascade)
  trialEvents         TrialEvent[]

  @@unique([trialId, sessionDate, sessionType])
  @@index([trialId, sessionDate])
}

model Page {
  id              Int             @id @default(autoincrement())
  sessionId       Int
  pageNumber      Int
  documentSection DocumentSection @default(UNKNOWN)
  trialPageNumber Int?
  pageId          String?
  headerText      String?
  createdAt       DateTime        @default(now())
  lines           Line[]
  session         Session         @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@unique([sessionId, pageNumber])
  @@index([sessionId, pageNumber])
  @@index([documentSection])
}

model Line {
  id                Int      @id @default(autoincrement())
  pageId            Int
  lineNumber        Int
  trialLineNumber   Int?
  sessionLineNumber Int?
  timestamp         String?
  text              String?
  speakerPrefix     String?
  isBlank           Boolean  @default(false)
  createdAt         DateTime @default(now())
  page              Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@unique([pageId, lineNumber])
  @@index([pageId, lineNumber])
  @@index([trialLineNumber])
  @@index([sessionLineNumber])
}

model Attorney {
  id             Int             @id @default(autoincrement())
  name           String
  title          String?
  firstName      String?
  middleInitial  String?
  lastName       String?
  suffix         String?
  speakerPrefix  String?
  barNumber      String?
  speakerId      Int             @unique
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  speaker        Speaker         @relation(fields: [speakerId], references: [id], onDelete: Cascade)
  trialAttorneys TrialAttorney[]

  @@index([name])
  @@index([speakerPrefix])
  @@index([lastName])
}

model TrialAttorney {
  id              Int            @id @default(autoincrement())
  trialId         Int
  attorneyId      Int
  role            AttorneyRole
  lawFirmId       Int?
  lawFirmOfficeId Int?
  attorney        Attorney       @relation(fields: [attorneyId], references: [id], onDelete: Cascade)
  lawFirm         LawFirm?       @relation(fields: [lawFirmId], references: [id])
  lawFirmOffice   LawFirmOffice? @relation(fields: [lawFirmOfficeId], references: [id])
  trial           Trial          @relation(fields: [trialId], references: [id], onDelete: Cascade)

  @@unique([trialId, attorneyId])
  @@index([trialId, role])
}

model LawFirm {
  id             Int             @id @default(autoincrement())
  name           String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  offices        LawFirmOffice[]
  trialAttorneys TrialAttorney[]

  @@index([name])
}

model LawFirmOffice {
  id             Int             @id @default(autoincrement())
  lawFirmId      Int
  name           String
  addressId      Int             @unique
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  address        Address         @relation(fields: [addressId], references: [id], onDelete: Cascade)
  lawFirm        LawFirm         @relation(fields: [lawFirmId], references: [id], onDelete: Cascade)
  trialAttorneys TrialAttorney[]

  @@unique([lawFirmId, name])
  @@index([lawFirmId])
}

model Address {
  id             Int             @id @default(autoincrement())
  street1        String?
  street2        String?
  city           String?
  state          String?
  zipCode        String?
  country        String?         @default("USA")
  fullAddress    String?
  courtReporters CourtReporter[]
  lawFirmOffice  LawFirmOffice?

  @@index([fullAddress])
}

model Speaker {
  id               Int               @id @default(autoincrement())
  trialId          Int
  speakerPrefix    String
  speakerHandle    String
  speakerType      SpeakerType
  createdAt        DateTime          @default(now())
  anonymousSpeaker AnonymousSpeaker?
  attorney         Attorney?
  judge            Judge?
  juror            Juror?
  statements       StatementEvent[]
  witness          Witness?

  @@unique([trialId, speakerHandle])
  @@index([trialId, speakerPrefix])
  @@index([trialId, speakerHandle])
}

model Witness {
  id            Int                  @id @default(autoincrement())
  trialId       Int
  name          String?
  firstName     String?
  middleInitial String?
  lastName      String?
  suffix        String?
  displayName   String?
  speakerId     Int?                 @unique
  witnessType   WitnessType?
  witnessCaller WitnessCaller?
  expertField   String?
  swornStatus   SwornStatus          @default(NOT_SWORN)
  createdAt     DateTime             @default(now())
  speaker       Speaker?             @relation(fields: [speakerId], references: [id])
  trial         Trial                @relation(fields: [trialId], references: [id], onDelete: Cascade)
  witnessEvents WitnessCalledEvent[]

  @@index([trialId, witnessType])
  @@index([speakerId])
}

model Juror {
  id          Int      @id @default(autoincrement())
  trialId     Int
  speakerId   Int      @unique
  name        String?
  lastName    String?
  jurorNumber Int?
  alias       String?
  createdAt   DateTime @default(now())
  speaker     Speaker  @relation(fields: [speakerId], references: [id], onDelete: Cascade)
  trial       Trial    @relation(fields: [trialId], references: [id], onDelete: Cascade)

  @@index([trialId])
  @@index([lastName])
}

model AnonymousSpeaker {
  id          Int      @id @default(autoincrement())
  trialId     Int
  speakerId   Int      @unique
  role        String?
  description String?
  createdAt   DateTime @default(now())
  speaker     Speaker  @relation(fields: [speakerId], references: [id], onDelete: Cascade)
  trial       Trial    @relation(fields: [trialId], references: [id], onDelete: Cascade)

  @@index([trialId])
}

model TrialEvent {
  id              Int                  @id @default(autoincrement())
  trialId         Int
  sessionId       Int?
  startTime       String?
  endTime         String?
  duration        Int?
  startLineNumber Int?
  endLineNumber   Int?
  lineCount       Int?
  wordCount       Int?
  characterCount  Int?
  eventType       EventType
  createdAt       DateTime             @default(now())
  courtDirective  CourtDirectiveEvent?
  statement       StatementEvent?
  session         Session?             @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  trial           Trial                @relation(fields: [trialId], references: [id], onDelete: Cascade)
  witnessCalled   WitnessCalledEvent?

  @@index([trialId, startTime])
  @@index([sessionId])
}

model CourtDirectiveEvent {
  id              Int                @id @default(autoincrement())
  eventId         Int                @unique
  directiveTypeId Int
  rawText         String             @db.VarChar(255)
  isStandard      Boolean            @default(true)
  directiveType   CourtDirectiveType @relation(fields: [directiveTypeId], references: [id])
  event           TrialEvent         @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@index([directiveTypeId])
}

model CourtDirectiveType {
  id          Int                   @id @default(autoincrement())
  name        String                @unique
  description String?
  isPaired    Boolean               @default(false)
  pairMateId  Int?
  isStart     Boolean?
  aliases     String[]
  directives  CourtDirectiveEvent[]
}

model StatementEvent {
  id              Int        @id @default(autoincrement())
  eventId         Int        @unique
  speakerId       Int?
  speakerAlias    String?
  text            String
  elasticSearchId String?
  event           TrialEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)
  speaker         Speaker?   @relation(fields: [speakerId], references: [id])

  @@index([speakerId])
  @@index([elasticSearchId])
}

model WitnessCalledEvent {
  id               Int             @id @default(autoincrement())
  eventId          Int             @unique
  witnessId        Int?
  examinationType  ExaminationType
  swornStatus      SwornStatus     @default(NOT_SWORN)
  continued        Boolean         @default(false)
  presentedByVideo Boolean         @default(false)
  rawText          String          @db.VarChar(255)
  event            TrialEvent      @relation(fields: [eventId], references: [id], onDelete: Cascade)
  witness          Witness?        @relation(fields: [witnessId], references: [id])

  @@index([witnessId])
}

model Marker {
  id             Int            @id @default(autoincrement())
  trialId        Int
  markerType     MarkerType
  markerCategory MarkerCategory
  startEventId   Int?
  endEventId     Int?
  startTime      String?
  endTime        String?
  name           String?
  description    String?
  metadata       Json?
  createdAt      DateTime       @default(now())
  trial          Trial          @relation(fields: [trialId], references: [id], onDelete: Cascade)

  @@index([trialId, markerType])
}

model SearchIndex {
  id             Int      @id @default(autoincrement())
  entityType     String
  entityId       Int
  searchableText String
  metadata       Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([entityType, entityId])
}

enum SessionType {
  MORNING
  AFTERNOON
  SPECIAL
  BENCH_TRIAL
  JURY_VERDICT
  OTHER
}

enum DocumentSection {
  SUMMARY
  PROCEEDINGS
  CERTIFICATION
  UNKNOWN
}

enum AttorneyRole {
  PLAINTIFF
  DEFENDANT
  THIRD_PARTY
}

enum SpeakerType {
  ATTORNEY
  JUDGE
  WITNESS
  JUROR
  ANONYMOUS
}

enum WitnessType {
  EXPERT_WITNESS
  FACT_WITNESS
  CHARACTER_WITNESS
  REBUTTAL_WITNESS
}

enum WitnessCaller {
  PLAINTIFF
  DEFENDANT
}

enum EventType {
  COURT_DIRECTIVE
  STATEMENT
  WITNESS_CALLED
  OBJECTION
  RULING
  EXHIBIT
  OTHER
}

enum ExaminationType {
  DIRECT_EXAMINATION
  CROSS_EXAMINATION
  REDIRECT_EXAMINATION
  RECROSS_EXAMINATION
  VIDEO_DEPOSITION
}

enum SwornStatus {
  SWORN
  PREVIOUSLY_SWORN
  NOT_SWORN
}

enum MarkerType {
  OPENING_STATEMENT
  CLOSING_ARGUMENT
  WITNESS_TESTIMONY
  JURY_INSTRUCTION
  OBJECTION_SUSTAINED
  OBJECTION_OVERRULED
  EXHIBIT_ADMITTED
  EXHIBIT_REJECTED
  SIDEBAR
  RECESS
  SEALED_PORTION
  VIDEO_DEPOSITION
  EXAMINATION_SEGMENT
  OTHER
}

enum MarkerCategory {
  PROCEDURAL
  EVIDENTIARY
  TESTIMONIAL
  ARGUMENTATIVE
  ADMINISTRATIVE
}
