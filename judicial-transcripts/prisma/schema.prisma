// This is the Prisma schema file for the Judicial Transcripts system
// Using PostgreSQL as the database with MTI pattern for Speakers

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==================== Core Entities ====================

model Trial {
  id              Int       @id @default(autoincrement())
  name            String
  caseNumber      String    @unique // e.g., "2:19-CV-123-JRG"
  court           String    // e.g., "UNITED STATES DISTRICT COURT"
  courtDivision   String?   // e.g., "MARSHALL DIVISION"
  courtDistrict   String?   // e.g., "EASTERN DISTRICT OF TEXAS"  
  totalPages      Int?      // Sum of pages from all sessions
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  sessions        Session[]
  attorneys       TrialAttorney[]
  witnesses       Witness[]
  jurors          Juror[]
  anonymousSpeakers AnonymousSpeaker[]
  courtReporter   CourtReporter?
  judge           Judge?
  trialEvents     TrialEvent[]
  markers         Marker[]
  
  @@index([caseNumber])
}

model Judge {
  id              Int       @id @default(autoincrement())
  name            String
  title           String?
  honorific       String?   // e.g., "HONORABLE"
  speakerId       Int       @unique
  speaker         Speaker   @relation(fields: [speakerId], references: [id], onDelete: Cascade)
  trialId         Int       @unique
  trial           Trial     @relation(fields: [trialId], references: [id], onDelete: Cascade)
  
  @@index([trialId])
}

model CourtReporter {
  id              Int       @id @default(autoincrement())
  name            String
  credentials     String?   // e.g., "CSR, TCRR"
  title           String?
  stateNumber     String?
  expirationDate  DateTime?
  addressId       Int?
  address         Address?  @relation(fields: [addressId], references: [id], onDelete: SetNull)
  phone           String?
  trialId         Int       @unique
  trial           Trial     @relation(fields: [trialId], references: [id], onDelete: Cascade)
  
  @@index([trialId])
}

// ==================== Session Management ====================

model Session {
  id                  Int       @id @default(autoincrement())
  trialId             Int
  trial               Trial     @relation(fields: [trialId], references: [id], onDelete: Cascade)
  sessionDate         DateTime
  sessionType         SessionType
  documentNumber      Int?
  fileName            String?
  totalPages          Int?      // Total pages in this session
  transcriptStartPage Int?      // First page number within entire trial
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  
  pages           Page[]
  trialEvents     TrialEvent[]
  
  @@index([trialId, sessionDate])
  @@unique([trialId, sessionDate, sessionType])
}

enum SessionType {
  MORNING
  AFTERNOON
  SPECIAL
  BENCH_TRIAL
  JURY_VERDICT
  OTHER
}

// ==================== Document Sections ====================

enum DocumentSection {
  SUMMARY
  PROCEEDINGS  
  CERTIFICATION
  UNKNOWN
}

// ==================== Page and Line Management ====================

model Page {
  id                Int             @id @default(autoincrement())
  sessionId         Int
  session           Session         @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  pageNumber        Int             // Page number within session
  documentSection   DocumentSection @default(UNKNOWN)
  trialPageNumber   Int?            // Page number within entire trial
  pageId            String?         // e.g., "18337" (parsed from PageID #: 18337)
  headerText        String?         // Full page header text
  createdAt         DateTime        @default(now())
  
  lines           Line[]
  
  @@index([sessionId, pageNumber])
  @@index([documentSection])
  @@unique([sessionId, pageNumber])
}

model Line {
  id                Int       @id @default(autoincrement())
  pageId            Int
  page              Page      @relation(fields: [pageId], references: [id], onDelete: Cascade)
  lineNumber        Int       // Line number within page
  trialLineNumber   Int?      // Line number within entire trial
  sessionLineNumber Int?      // Line number within session
  timestamp         String?   // Store as string to preserve original format
  text              String?
  speakerPrefix     String?   // e.g., "Q.", "A.", "THE COURT:", etc.
  isBlank           Boolean   @default(false)
  createdAt         DateTime  @default(now())
  
  @@index([pageId, lineNumber])
  @@index([trialLineNumber])
  @@index([sessionLineNumber])
  @@unique([pageId, lineNumber])
}

// ==================== Attorney and Law Firm Management ====================

model Attorney {
  id              Int       @id @default(autoincrement())
  name            String
  title           String?   // MR., MS., MRS., DR., etc.
  lastName        String?   // Parsed last name for matching
  speakerPrefix   String?   // Calculated field: title + lastName (e.g., "MR. SMITH")
  barNumber       String?
  speakerId       Int       @unique
  speaker         Speaker   @relation(fields: [speakerId], references: [id], onDelete: Cascade)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  trialAttorneys  TrialAttorney[]
  
  @@index([name])
  @@index([speakerPrefix])
  @@index([lastName])
}

model TrialAttorney {
  id              Int       @id @default(autoincrement())
  trialId         Int
  trial           Trial     @relation(fields: [trialId], references: [id], onDelete: Cascade)
  attorneyId      Int
  attorney        Attorney  @relation(fields: [attorneyId], references: [id], onDelete: Cascade)
  role            AttorneyRole
  lawFirmId       Int?
  lawFirm         LawFirm?  @relation(fields: [lawFirmId], references: [id], onDelete: SetNull)
  lawFirmOfficeId Int?
  lawFirmOffice   LawFirmOffice? @relation(fields: [lawFirmOfficeId], references: [id], onDelete: SetNull)
  
  @@unique([trialId, attorneyId])
  @@index([trialId, role])
}

enum AttorneyRole {
  PLAINTIFF
  DEFENDANT
  THIRD_PARTY
}

model LawFirm {
  id              Int       @id @default(autoincrement())
  name            String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  offices         LawFirmOffice[]
  trialAttorneys  TrialAttorney[]
  
  @@index([name])
}

model LawFirmOffice {
  id              Int       @id @default(autoincrement())
  lawFirmId       Int
  lawFirm         LawFirm   @relation(fields: [lawFirmId], references: [id], onDelete: Cascade)
  name            String    // Office name (typically city name)
  addressId       Int       @unique
  address         Address   @relation(fields: [addressId], references: [id], onDelete: Cascade)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  trialAttorneys  TrialAttorney[]
  
  @@index([lawFirmId])
  @@unique([lawFirmId, name])
}

model Address {
  id              Int       @id @default(autoincrement())
  street1         String?
  street2         String?
  city            String?
  state           String?
  zipCode         String?
  country         String?   @default("USA")
  
  lawFirmOffice   LawFirmOffice?
  courtReporters  CourtReporter[]
}

enum SpeakerType {
  ATTORNEY
  JUDGE
  WITNESS
  JUROR
  ANONYMOUS
}

// ==================== Speaker MTI Base Entity ====================

model Speaker {
  id              Int       @id @default(autoincrement())
  trialId         Int
  speakerPrefix   String    // Display prefix (e.g., "A.", "Q.", "MR. SMITH")
  speakerHandle   String    // Unique handle (e.g., "WITNESS_QI_PETER_LI")
  speakerType     SpeakerType
  createdAt       DateTime  @default(now())
  
  // Relations
  attorney        Attorney?
  judge           Judge?
  witness         Witness?
  juror           Juror?
  anonymousSpeaker AnonymousSpeaker?
  statements      StatementEvent[]
  
  @@index([trialId, speakerPrefix])
  @@index([trialId, speakerHandle])
  @@unique([trialId, speakerHandle])  // Handle must be unique
}

model Witness {
  id              Int       @id @default(autoincrement())
  trialId         Int
  trial           Trial     @relation(fields: [trialId], references: [id], onDelete: Cascade)
  name            String?   // Normalized name for storage
  displayName     String?   // Display name with quotes/formatting
  speakerId       Int?      @unique
  speaker         Speaker?  @relation(fields: [speakerId], references: [id], onDelete: SetNull)
  witnessType     WitnessType?
  witnessCaller   WitnessCaller?
  expertField     String?
  swornStatus     SwornStatus @default(NOT_SWORN)  // Track sworn status
  createdAt       DateTime  @default(now())
  
  witnessEvents   WitnessCalledEvent[]
  
  @@index([trialId, witnessType])
  @@index([speakerId])
}

enum WitnessType {
  EXPERT_WITNESS
  FACT_WITNESS
  CHARACTER_WITNESS
  REBUTTAL_WITNESS
}

enum WitnessCaller {
  PLAINTIFF
  DEFENDANT
}

// ==================== Juror Entity ====================

model Juror {
  id              Int       @id @default(autoincrement())
  trialId         Int
  trial           Trial     @relation(fields: [trialId], references: [id], onDelete: Cascade)
  speakerId       Int       @unique
  speaker         Speaker   @relation(fields: [speakerId], references: [id], onDelete: Cascade)
  name            String?   // Full name if parseable
  lastName        String?   // Last name for alias matching
  jurorNumber     Int?      // Juror number if parseable
  alias           String?   // Alternative reference (e.g., "MR. RAGSDALE" for "JUROR RAGSDALE")
  createdAt       DateTime  @default(now())
  
  @@index([trialId])
  @@index([lastName])
}

// ==================== Anonymous Speaker Entity ====================

model AnonymousSpeaker {
  id              Int       @id @default(autoincrement())
  trialId         Int
  trial           Trial     @relation(fields: [trialId], references: [id], onDelete: Cascade)
  speakerId       Int       @unique
  speaker         Speaker   @relation(fields: [speakerId], references: [id], onDelete: Cascade)
  role            String?   // e.g., "COURT SECURITY OFFICER", "TECHNICIAN", "COURT REPORTER"
  description     String?   // Any additional context
  createdAt       DateTime  @default(now())
  
  @@index([trialId])
}

// ==================== Phase II: Trial Events (MTI Pattern) ====================

model TrialEvent {
  id              Int       @id @default(autoincrement())
  trialId         Int
  trial           Trial     @relation(fields: [trialId], references: [id], onDelete: Cascade)
  sessionId       Int?
  session         Session?  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  startTime       String?
  endTime         String?
  duration        Int?      // Duration in seconds
  startLineNumber Int?
  endLineNumber   Int?
  lineCount       Int?
  eventType       EventType
  createdAt       DateTime  @default(now())
  
  // Specific event types
  courtDirective  CourtDirectiveEvent?
  statement       StatementEvent?
  witnessCalled   WitnessCalledEvent?
  
  @@index([trialId, startTime])
  @@index([sessionId])
}

enum EventType {
  COURT_DIRECTIVE
  STATEMENT
  WITNESS_CALLED
  OBJECTION
  RULING
  EXHIBIT
  OTHER
}

model CourtDirectiveEvent {
  id              Int       @id @default(autoincrement())
  eventId         Int       @unique
  event           TrialEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)
  directiveTypeId Int
  directiveType   CourtDirectiveType @relation(fields: [directiveTypeId], references: [id])
  rawText         String    @db.VarChar(255) // Store raw directive text (max 255 chars)
  isStandard      Boolean   @default(true)
  
  @@index([directiveTypeId])
}

model CourtDirectiveType {
  id              Int       @id @default(autoincrement())
  name            String    @unique
  description     String?
  isPaired        Boolean   @default(false)
  pairMateId      Int?      // Reference to the paired directive
  isStart         Boolean?  // true for start, false for end, null for unpaired
  aliases         String[]  // Alternative text patterns
  
  directives      CourtDirectiveEvent[]
}

model StatementEvent {
  id              Int       @id @default(autoincrement())
  eventId         Int       @unique
  event           TrialEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)
  speakerId       Int?
  speaker         Speaker?  @relation(fields: [speakerId], references: [id], onDelete: SetNull)
  text            String    @db.Text // Long text field for statement content
  elasticSearchId String?   // ID for ElasticSearch indexing
  
  @@index([speakerId])
  @@index([elasticSearchId])
}

model WitnessCalledEvent {
  id              Int       @id @default(autoincrement())
  eventId         Int       @unique
  event           TrialEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)
  witnessId       Int?
  witness         Witness?  @relation(fields: [witnessId], references: [id], onDelete: SetNull)
  examinationType ExaminationType
  swornStatus     SwornStatus @default(NOT_SWORN)
  continued       Boolean   @default(false)
  presentedByVideo Boolean  @default(false)
  rawText         String    @db.VarChar(255) // Store raw witness calling text (max 255 chars)
  
  @@index([witnessId])
}

enum ExaminationType {
  DIRECT_EXAMINATION
  CROSS_EXAMINATION
  REDIRECT_EXAMINATION
  RECROSS_EXAMINATION
  VIDEO_DEPOSITION
}

enum SwornStatus {
  SWORN
  PREVIOUSLY_SWORN
  NOT_SWORN
}

// ==================== Phase III: Markers and Sections ====================

model Marker {
  id              Int       @id @default(autoincrement())
  trialId         Int
  trial           Trial     @relation(fields: [trialId], references: [id], onDelete: Cascade)
  markerType      MarkerType
  markerCategory  MarkerCategory
  startEventId    Int?
  endEventId      Int?
  startTime       String?
  endTime         String?
  name            String?
  description     String?
  metadata        Json?     // Store additional marker metadata
  createdAt       DateTime  @default(now())
  
  @@index([trialId, markerType])
}

enum MarkerType {
  OPENING_STATEMENT
  CLOSING_ARGUMENT
  WITNESS_TESTIMONY
  JURY_INSTRUCTION
  OBJECTION_SUSTAINED
  OBJECTION_OVERRULED
  EXHIBIT_ADMITTED
  EXHIBIT_REJECTED
  SIDEBAR
  RECESS
  SEALED_PORTION
  VIDEO_DEPOSITION
  EXAMINATION_SEGMENT
  OTHER
}

enum MarkerCategory {
  PROCEDURAL
  EVIDENTIARY
  TESTIMONIAL
  ARGUMENTATIVE
  ADMINISTRATIVE
}

// ==================== Search and Analytics ====================

model SearchIndex {
  id              Int       @id @default(autoincrement())
  entityType      String    // "statement", "directive", "witness_event"
  entityId        Int
  searchableText  String    @db.Text
  metadata        Json?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@index([entityType, entityId])
  // Note: For full-text search, consider using ElasticSearch or creating GIN index manually:
  // CREATE EXTENSION IF NOT EXISTS pg_trgm;
  // CREATE INDEX search_index_text_gin ON "SearchIndex" USING gin(searchable_text gin_trgm_ops);
}