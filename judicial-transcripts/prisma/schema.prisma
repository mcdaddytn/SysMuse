generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Trial {
  id                  Int                    @id @default(autoincrement())
  name                String
  shortName           String?                @unique
  shortNameHandle     String?
  caseNumber          String                 @unique
  caseHandle          String?
  plaintiff           String?
  defendant           String?
  alternateCaseNumber String?
  alternateDefendant  String?
  court               String
  courtDivision       String?
  courtDistrict       String?
  totalPages          Int?
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  trialStyle          Json?
  anonymousSpeakers   AnonymousSpeaker[]
  courtReporter       CourtReporter?
  judge               Judge?
  jurors              Juror[]
  markers             Marker[]
  markerSections      MarkerSection[]
  sessions            Session[]
  sessionSections     SessionSection[]
  attorneys           TrialAttorney[]
  trialEvents         TrialEvent[]
  processingStatus    TrialProcessingStatus?
  workflowState       TrialWorkflowState?
  witnesses           Witness[]
  markerTimelines     MarkerTimeline[]

  @@index([caseNumber])
}

model Judge {
  id               Int     @id @default(autoincrement())
  name             String
  title            String?
  honorific        String?
  judgeFingerprint String?
  speakerId        Int?    @unique
  trialId          Int     @unique
  speaker          Speaker? @relation(fields: [speakerId], references: [id], onDelete: Cascade)
  trial            Trial   @relation(fields: [trialId], references: [id], onDelete: Cascade)

  @@index([trialId])
}

model CourtReporter {
  id                       Int       @id @default(autoincrement())
  name                     String
  credentials              String?
  title                    String?
  stateNumber              String?
  expirationDate           DateTime?
  addressId                Int?
  phone                    String?
  courtReporterFingerprint String?
  trialId                  Int       @unique
  address                  Address?  @relation(fields: [addressId], references: [id])
  trial                    Trial     @relation(fields: [trialId], references: [id], onDelete: Cascade)

  @@index([trialId])
}

model Session {
  id                  Int              @id @default(autoincrement())
  trialId             Int
  sessionDate         DateTime
  sessionType         SessionType
  sessionHandle       String?          // YYYYMMDD_sessionType format
  ordinal             Int?
  shortName           String?
  startTime           String?
  documentNumber      Int?
  fileName            String?
  metadata            Json?
  totalPages          Int?
  transcriptStartPage Int?
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  pages               Page[]
  trial               Trial            @relation(fields: [trialId], references: [id], onDelete: Cascade)
  sessionSections     SessionSection[]
  trialEvents         TrialEvent[]

  @@unique([trialId, sessionDate, sessionType])
  @@index([trialId, sessionDate])
}

model SessionSection {
  id          Int      @id @default(autoincrement())
  sessionId   Int
  trialId     Int
  sectionType String
  sectionText String
  orderIndex  Int
  metadata    Json?
  createdAt   DateTime @default(now())
  session     Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  trial       Trial    @relation(fields: [trialId], references: [id], onDelete: Cascade)

  @@index([sessionId, orderIndex])
  @@index([trialId])
}

model Page {
  id              Int      @id @default(autoincrement())
  sessionId       Int
  pageNumber      Int
  trialPageNumber Int?
  parsedTrialPage Int?
  pageId          String?
  headerText      String?
  createdAt       DateTime @default(now())
  lines           Line[]
  session         Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@unique([sessionId, pageNumber])
  @@index([sessionId, pageNumber])
}

model Line {
  id                Int             @id @default(autoincrement())
  pageId            Int
  lineNumber        Int
  trialLineNumber   Int?
  sessionLineNumber Int?
  linePrefix        String?
  documentSection   DocumentSection @default(UNKNOWN)
  timestamp         String?
  dateTime          DateTime?
  text              String?
  speakerPrefix     String?
  isBlank           Boolean         @default(false)
  createdAt         DateTime        @default(now())
  page              Page            @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@unique([pageId, lineNumber])
  @@index([pageId, lineNumber])
  @@index([trialLineNumber])
  @@index([sessionLineNumber])
  @@index([documentSection])
}

model Attorney {
  id                  Int                  @id @default(autoincrement())
  name                String
  title               String?
  firstName           String?
  middleInitial       String?
  lastName            String?
  suffix              String?
  speakerPrefix       String?
  barNumber           String?
  attorneyFingerprint String?              @unique
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  trialAttorneys      TrialAttorney[]
  witnessCalledEvents WitnessCalledEvent[]

  @@index([name])
  @@index([speakerPrefix])
  @@index([lastName])
}

model TrialAttorney {
  id              Int            @id @default(autoincrement())
  trialId         Int
  attorneyId      Int
  speakerId       Int?           
  role            AttorneyRole
  lawFirmId       Int?
  lawFirmOfficeId Int?
  attorney        Attorney       @relation(fields: [attorneyId], references: [id], onDelete: Cascade)
  speaker         Speaker?       @relation(fields: [speakerId], references: [id], onDelete: Cascade)
  lawFirm         LawFirm?       @relation(fields: [lawFirmId], references: [id])
  lawFirmOffice   LawFirmOffice? @relation(fields: [lawFirmOfficeId], references: [id])
  trial           Trial          @relation(fields: [trialId], references: [id], onDelete: Cascade)

  @@unique([trialId, attorneyId])
  @@unique([trialId, speakerId])
  @@index([trialId, role])
  @@index([speakerId])
}

model LawFirm {
  id                 Int             @id @default(autoincrement())
  name               String
  lawFirmFingerprint String?           @unique
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  offices            LawFirmOffice[]
  trialAttorneys     TrialAttorney[]

  @@index([name])
}

model LawFirmOffice {
  id                       Int             @id @default(autoincrement())
  lawFirmId                Int
  name                     String
  addressId                Int?            @unique
  lawFirmOfficeFingerprint String?        @unique
  createdAt                DateTime        @default(now())
  updatedAt                DateTime        @updatedAt
  address                  Address?        @relation(fields: [addressId], references: [id], onDelete: Cascade)
  lawFirm                  LawFirm         @relation(fields: [lawFirmId], references: [id], onDelete: Cascade)
  trialAttorneys           TrialAttorney[]

  @@unique([lawFirmId, name])
  @@index([lawFirmId])
}

model Address {
  id             Int             @id @default(autoincrement())
  street1        String?
  street2        String?
  city           String?
  state          String?
  zipCode        String?
  country        String?         @default("USA")
  fullAddress    String?
  courtReporters CourtReporter[]
  lawFirmOffice  LawFirmOffice?

  @@index([fullAddress])
}

model Speaker {
  id               Int               @id @default(autoincrement())
  trialId          Int
  speakerPrefix    String
  speakerHandle    String
  speakerType      SpeakerType
  isGeneric        Boolean           @default(false)
  createdAt        DateTime          @default(now())
  anonymousSpeaker AnonymousSpeaker?
  trialAttorneys   TrialAttorney[]
  judge            Judge?
  juror            Juror?
  statements       StatementEvent[]
  witness          Witness?

  @@unique([trialId, speakerHandle])
  @@index([trialId, speakerPrefix])
  @@index([trialId, speakerHandle])
}

model Witness {
  id                 Int                  @id @default(autoincrement())
  trialId            Int
  name               String?
  firstName          String?
  middleInitial      String?
  lastName           String?
  suffix             String?
  displayName        String?
  speakerId          Int?                 @unique
  witnessFingerprint String?              @unique
  witnessType        WitnessType?
  witnessCaller      WitnessCaller?
  expertField        String?
  swornStatus        SwornStatus          @default(NOT_SWORN)
  createdAt          DateTime             @default(now())
  speaker            Speaker?             @relation(fields: [speakerId], references: [id])
  trial              Trial                @relation(fields: [trialId], references: [id], onDelete: Cascade)
  witnessEvents      WitnessCalledEvent[]

  @@index([trialId, witnessType])
  @@index([speakerId])
}

model Juror {
  id          Int      @id @default(autoincrement())
  trialId     Int
  speakerId   Int      @unique
  name        String?
  lastName    String?
  jurorNumber Int?
  alias       String?
  createdAt   DateTime @default(now())
  speaker     Speaker  @relation(fields: [speakerId], references: [id], onDelete: Cascade)
  trial       Trial    @relation(fields: [trialId], references: [id], onDelete: Cascade)

  @@index([trialId])
  @@index([lastName])
}

model AnonymousSpeaker {
  id          Int      @id @default(autoincrement())
  trialId     Int
  speakerId   Int      @unique
  role        String?
  description String?
  createdAt   DateTime @default(now())
  speaker     Speaker  @relation(fields: [speakerId], references: [id], onDelete: Cascade)
  trial       Trial    @relation(fields: [trialId], references: [id], onDelete: Cascade)

  @@index([trialId])
}

model TrialEvent {
  id                Int                  @id @default(autoincrement())
  trialId           Int
  sessionId         Int?
  ordinal           Int?
  startTime         String?
  endTime           String?
  startDateTime     DateTime?
  endDateTime       DateTime?
  duration          Int?
  startLineNumber   Int?
  endLineNumber     Int?
  startSessLineNum  Int?                 // Session line number at start
  endSessLineNum    Int?                 // Session line number at end
  startTrialLineNum Int?                 // Trial line number at start
  endTrialLineNum   Int?                 // Trial line number at end
  lineCount         Int?
  wordCount         Int?
  characterCount    Int?
  eventType         EventType
  rawText           String?              @db.VarChar(255)
  createdAt         DateTime             @default(now())
  accumEndResults   AccumulatorResult[]  @relation("AccumEndEvent")
  accumStartResults AccumulatorResult[]  @relation("AccumStartEvent")
  courtDirective    CourtDirectiveEvent?
  markers           Marker[]
  sectionEnds       MarkerSection[]      @relation("SectionEnd")
  sectionStarts     MarkerSection[]      @relation("SectionStart")
  statement         StatementEvent?
  session           Session?             @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  trial             Trial                @relation(fields: [trialId], references: [id], onDelete: Cascade)
  witnessCalled     WitnessCalledEvent?

  @@index([trialId, startTime])
  @@index([sessionId])
}

model CourtDirectiveEvent {
  id              Int                @id @default(autoincrement())
  eventId         Int                @unique
  directiveTypeId Int
  isStandard      Boolean            @default(true)
  directiveType   CourtDirectiveType @relation(fields: [directiveTypeId], references: [id])
  event           TrialEvent         @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@index([directiveTypeId])
}

model CourtDirectiveType {
  id          Int                   @id @default(autoincrement())
  name        String                @unique
  description String?
  isPaired    Boolean               @default(false)
  pairMateId  Int?
  isStart     Boolean?
  aliases     String[]
  directives  CourtDirectiveEvent[]
}

model StatementEvent {
  id              Int                   @id @default(autoincrement())
  eventId         Int                   @unique
  speakerId       Int?
  speakerAlias    String?
  text            String
  elasticSearchId String?
  esResults       ElasticSearchResult[]
  event           TrialEvent            @relation(fields: [eventId], references: [id], onDelete: Cascade)
  speaker         Speaker?              @relation(fields: [speakerId], references: [id])

  @@index([speakerId])
  @@index([elasticSearchId])
}

model WitnessCalledEvent {
  id               Int             @id @default(autoincrement())
  eventId          Int             @unique
  witnessId        Int?
  attorneyId       Int?
  examinationType  ExaminationType
  swornStatus      SwornStatus     @default(NOT_SWORN)
  continued        Boolean         @default(false)
  presentedByVideo Boolean         @default(false)
  attorney         Attorney?       @relation(fields: [attorneyId], references: [id])
  event            TrialEvent      @relation(fields: [eventId], references: [id], onDelete: Cascade)
  witness          Witness?        @relation(fields: [witnessId], references: [id])

  @@index([witnessId])
  @@index([attorneyId])
}

model Marker {
  id               Int                @id @default(autoincrement())
  trialId          Int
  markerType       MarkerType
  sectionType      MarkerSectionType? // Required when markerType is SECTION_START/END
  eventId          Int?
  name             String?
  description      String?
  metadata         Json?
  source           MarkerSource       @default(MANUAL)
  confidence       Float?             // 0.0 to 1.0
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  event            TrialEvent?        @relation(fields: [eventId], references: [id])
  trial            Trial              @relation(fields: [trialId], references: [id], onDelete: Cascade)
  endingSections   MarkerSection[]    @relation("EndMarker")
  startingSections MarkerSection[]    @relation("StartMarker")

  @@index([trialId, markerType])
  @@index([trialId, sectionType])
  @@index([eventId])
}

model MarkerSection {
  id                Int                    @id @default(autoincrement())
  trialId           Int
  markerSectionType MarkerSectionType
  startMarkerId     Int?
  endMarkerId       Int?
  startEventId      Int?
  endEventId        Int?
  startTime         String?
  endTime           String?
  name              String?
  description       String?
  metadata          Json?
  parentSectionId   Int?
  parentSection     MarkerSection?         @relation("ParentChild", fields: [parentSectionId], references: [id])
  childSections     MarkerSection[]        @relation("ParentChild")
  text              String?                @db.Text
  textTemplate      String?
  elasticSearchId   String?
  source            MarkerSource           @default(MANUAL)
  confidence        Float?
  llmProvider       String?
  llmModel          String?
  timelineMembers   MarkerTimelineMember[]
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  endEvent          TrialEvent?            @relation("SectionEnd", fields: [endEventId], references: [id])
  endMarker         Marker?                @relation("EndMarker", fields: [endMarkerId], references: [id])
  startEvent        TrialEvent?            @relation("SectionStart", fields: [startEventId], references: [id])
  startMarker       Marker?                @relation("StartMarker", fields: [startMarkerId], references: [id])
  trial             Trial                  @relation(fields: [trialId], references: [id], onDelete: Cascade)

  @@index([trialId, markerSectionType])
  @@index([parentSectionId])
  @@index([source])
  @@index([startEventId, endEventId])
}

model MarkerTemplate {
  id                Int                @id @default(autoincrement())
  markerType        MarkerType?
  sectionType       MarkerSectionType?
  namePattern       String
  descPattern       String?
  parentTemplateId  Int?
  siblingTemplateId Int?
  isActive          Boolean            @default(true)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  parentTemplate    MarkerTemplate?    @relation("ParentChild", fields: [parentTemplateId], references: [id])
  childTemplates    MarkerTemplate[]   @relation("ParentChild")
  siblingTemplate   MarkerTemplate?    @relation("Siblings", fields: [siblingTemplateId], references: [id])
  siblingOf         MarkerTemplate[]   @relation("Siblings")

  @@index([markerType])
  @@index([sectionType])
}

model MarkerTimeline {
  id                    Int                      @id @default(autoincrement())
  trialId               Int
  name                  String
  description           String?
  timelineType          MarkerTimelineType
  continuousSections    Boolean                  @default(false)
  gapFillingStrategy    GapFillingStrategy?      @default(NONE)
  sourceTimelineId      Int?
  sourceTimeline        MarkerTimeline?          @relation("DerivedTimelines", fields: [sourceTimelineId], references: [id])
  derivedTimelines      MarkerTimeline[]         @relation("DerivedTimelines")
  metadata              Json?
  operationSpec         Json?
  createdAt             DateTime                 @default(now())
  updatedAt             DateTime                 @updatedAt
  trial                 Trial                    @relation(fields: [trialId], references: [id], onDelete: Cascade)
  members               MarkerTimelineMember[]
  templates             MarkerTimelineTemplate[]

  @@index([trialId])
  @@index([timelineType])
}

model MarkerTimelineMember {
  id                Int              @id @default(autoincrement())
  timelineId        Int
  sectionId         Int
  sequenceOrder     Int
  isGenerated       Boolean          @default(false)
  generationType    GenerationType?
  createdAt         DateTime         @default(now())
  timeline          MarkerTimeline   @relation(fields: [timelineId], references: [id], onDelete: Cascade)
  section           MarkerSection    @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  @@unique([timelineId, sequenceOrder])
  @@index([timelineId])
  @@index([sectionId])
}

model MarkerTimelineTemplate {
  id                    Int                  @id @default(autoincrement())
  timelineId            Int?
  templateType          TimelineTemplateType
  gapTemplate           String?
  introTemplate         String?
  conclusionTemplate    String?
  transitionTemplate    String?
  namePattern           String
  descriptionPattern    String?
  isActive              Boolean              @default(true)
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  timeline              MarkerTimeline?      @relation(fields: [timelineId], references: [id])

  @@index([templateType])
}

model SearchIndex {
  id             Int      @id @default(autoincrement())
  entityType     String
  entityId       Int
  searchableText String
  metadata       Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([entityType, entityId])
}

model ElasticSearchExpression {
  id               Int                     @id @default(autoincrement())
  name             String                  @unique
  expressionType   String
  phrasePattern    String
  searchStrategy   String
  esQuery          Json
  description      String?
  isActive         Boolean                 @default(true)
  createdAt        DateTime                @default(now())
  updatedAt        DateTime                @updatedAt
  results          ElasticSearchResult[]
  accumulatorExprs AccumulatorExpression[] @relation("AccumulatorESExpressions")

  @@index([expressionType])
  @@index([isActive])
}

model ElasticSearchResult {
  id           Int                     @id @default(autoincrement())
  expressionId Int
  statementId  Int
  trialId      Int
  matched      Boolean                 @default(false)
  score        Float?
  metadata     Json?
  createdAt    DateTime                @default(now())
  expression   ElasticSearchExpression @relation(fields: [expressionId], references: [id], onDelete: Cascade)
  statement    StatementEvent          @relation(fields: [statementId], references: [id], onDelete: Cascade)

  @@unique([expressionId, statementId])
  @@index([trialId])
  @@index([matched])
}

model AccumulatorExpression {
  id                 Int                       @id @default(autoincrement())
  name               String                    @unique
  description        String?
  expressionType     AccumulatorType
  windowSize         Int                       @default(5)
  thresholdValue     Float?
  minConfidenceLevel ConfidenceLevel?
  combinationType    CombinationType?
  metadata           Json?
  isActive           Boolean                   @default(true)
  createdAt          DateTime                  @default(now())
  updatedAt          DateTime                  @updatedAt
  components         AccumulatorComponent[]
  results            AccumulatorResult[]
  esExpressions      ElasticSearchExpression[] @relation("AccumulatorESExpressions")

  @@index([expressionType])
  @@index([isActive])
}

model AccumulatorComponent {
  id               Int                   @id @default(autoincrement())
  accumulatorId    Int
  componentType    String
  esExpressionId   Int?
  speakerType      SpeakerType?
  speakerHandle    String?
  weight           Float                 @default(1.0)
  requiredForMatch Boolean               @default(false)
  metadata         Json?
  accumulator      AccumulatorExpression @relation(fields: [accumulatorId], references: [id], onDelete: Cascade)

  @@index([accumulatorId])
}

model AccumulatorResult {
  id              Int                   @id @default(autoincrement())
  accumulatorId   Int
  trialId         Int
  startEventId    Int
  endEventId      Int
  booleanResult   Boolean?
  confidenceLevel ConfidenceLevel?
  floatResult     Float?
  metadata        Json?
  createdAt       DateTime              @default(now())
  accumulator     AccumulatorExpression @relation(fields: [accumulatorId], references: [id])
  endEvent        TrialEvent            @relation("AccumEndEvent", fields: [endEventId], references: [id])
  startEvent      TrialEvent            @relation("AccumStartEvent", fields: [startEventId], references: [id])

  @@index([accumulatorId, trialId])
  @@index([startEventId, endEventId])
}

model TrialProcessingStatus {
  id                     Int       @id @default(autoincrement())
  trialId                Int       @unique
  phase2StartedAt        DateTime?
  phase2CompletedAt      DateTime?
  phase2IndexName        String?
  phase2DocumentCount    Int       @default(0)
  phase3StartedAt        DateTime?
  phase3CompletedAt      DateTime?
  phase3MarkerCount      Int       @default(0)
  phase3SectionCount     Int       @default(0)
  elasticsearchCleared   Boolean   @default(false)
  elasticsearchClearedAt DateTime?
  phase2IndexSize        String?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  trial                  Trial     @relation(fields: [trialId], references: [id], onDelete: Cascade)

  @@index([trialId])
  @@index([elasticsearchCleared])
}

model TrialWorkflowState {
  id                      Int            @id @default(autoincrement())
  trialId                 Int            @unique
  
  // Step completion flags
  pdfConvertCompleted     Boolean        @default(false)
  pdfConvertAt            DateTime?
  llmOverrideCompleted    Boolean        @default(false)
  llmOverrideAt           DateTime?
  overrideReviewCompleted Boolean        @default(false)
  overrideReviewAt        DateTime?
  overrideImportCompleted Boolean        @default(false)
  overrideImportAt        DateTime?
  phase1Completed         Boolean        @default(false)
  phase1CompletedAt       DateTime?
  phase2Completed         Boolean        @default(false)
  phase2CompletedAt       DateTime?
  phase2IndexCompleted    Boolean        @default(false)
  phase2IndexAt           DateTime?
  llmMarker1Completed     Boolean        @default(false)
  llmMarker1At            DateTime?
  marker1ReviewCompleted  Boolean        @default(false)
  marker1ReviewAt         DateTime?
  marker1ImportCompleted  Boolean        @default(false)
  marker1ImportAt         DateTime?
  phase3Completed         Boolean        @default(false)
  phase3CompletedAt       DateTime?
  llmMarker2Completed     Boolean        @default(false)
  llmMarker2At            DateTime?
  marker2ReviewCompleted  Boolean        @default(false)
  marker2ReviewAt         DateTime?
  marker2ImportCompleted  Boolean        @default(false)
  marker2ImportAt         DateTime?
  phase3IndexCompleted    Boolean        @default(false)
  phase3IndexAt           DateTime?
  phase2CleanupCompleted  Boolean        @default(false)
  phase2CleanupAt         DateTime?
  
  // Status tracking
  currentStatus           WorkflowStatus @default(NOT_STARTED)
  llmOverrideStatus       LLMTaskStatus  @default(PENDING)
  llmMarker1Status        LLMTaskStatus  @default(PENDING)
  llmMarker2Status        LLMTaskStatus  @default(PENDING)
  
  // Task IDs for tracking
  llmOverrideTaskId       String?
  llmMarker1TaskId        String?
  llmMarker2TaskId        String?
  
  // Error tracking
  lastError               String?
  lastErrorAt             DateTime?
  retryCount              Int            @default(0)
  
  // Metadata
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt
  
  trial                   Trial          @relation(fields: [trialId], references: [id], onDelete: Cascade)

  @@index([trialId])
  @@index([llmOverrideStatus])
  @@index([llmMarker1Status])
  @@index([llmMarker2Status])
}

enum SessionType {
  MORNING
  AFTERNOON
  ALLDAY
  EVENING
  SPECIAL
  BENCH_TRIAL
  JURY_VERDICT
  OTHER
}

enum DocumentSection {
  SUMMARY
  PROCEEDINGS
  CERTIFICATION
  UNKNOWN
}

enum AttorneyRole {
  PLAINTIFF
  DEFENDANT
  THIRD_PARTY
  UNKNOWN
}

enum SpeakerType {
  ATTORNEY
  JUDGE
  WITNESS
  JUROR
  COURT_STAFF
  ANONYMOUS
  UNKNOWN
}

enum WitnessType {
  EXPERT_WITNESS
  FACT_WITNESS
  CHARACTER_WITNESS
  REBUTTAL_WITNESS
}

enum WitnessCaller {
  PLAINTIFF
  DEFENDANT
}

enum EventType {
  COURT_DIRECTIVE
  STATEMENT
  WITNESS_CALLED
}

enum ExaminationType {
  DIRECT_EXAMINATION
  CROSS_EXAMINATION
  REDIRECT_EXAMINATION
  RECROSS_EXAMINATION
  VIDEO_DEPOSITION
}

enum SwornStatus {
  SWORN
  PREVIOUSLY_SWORN
  NOT_SWORN
}

enum MarkerType {
  SECTION_START      // Marks the beginning of a section
  SECTION_END        // Marks the end of a section
  SECTION_LOCATOR    // Marks a point within a section (for searching boundaries)
  SEARCH_LOCATOR     // General search marker (not section-specific)
  CUSTOM             // User-defined marker
}

enum MarkerSectionType {
  // Top Level Hierarchy
  TRIAL                          // Root level
  SESSION                        // Session level (under TRIAL)
  
  // Standard Trial Sequence (under TRIAL)
  CASE_INTRO
  JURY_SELECTION
  OPENING_STATEMENTS_PERIOD
  OPENING_STATEMENT_PLAINTIFF
  OPENING_STATEMENT_DEFENSE
  WITNESS_TESTIMONY_PERIOD
  WITNESS_TESTIMONY_PLAINTIFF    // All plaintiff witnesses
  WITNESS_TESTIMONY_DEFENSE      // All defense witnesses
  CLOSING_STATEMENTS_PERIOD
  CLOSING_STATEMENT_PLAINTIFF
  CLOSING_STATEMENT_DEFENSE
  CLOSING_REBUTTAL_PLAINTIFF
  JURY_DELIBERATION
  JURY_VERDICT
  CASE_WRAPUP
  
  // Witness Level
  WITNESS_TESTIMONY              // Individual witness
  COMPLETE_WITNESS_TESTIMONY     // Legacy compatibility
  
  // Examination Level
  WITNESS_EXAMINATION            // Generic examination
  DIRECT_EXAMINATION
  CROSS_EXAMINATION
  REDIRECT_EXAMINATION
  RECROSS_EXAMINATION
  
  // Special Sections
  OBJECTION_SEQUENCE
  SIDEBAR
  BENCH_CONFERENCE
  RECESS
  BREAK
  HOUSEKEEPING
  EXHIBIT_ADMISSION
  DEPOSITION_READING
  VIDEO_PLAYBACK
  
  // Administrative/Legacy
  OPENING_ARGUMENT              // Legacy compatibility
  CLOSING_ARGUMENT              // Legacy compatibility
  VERDICT                        // Legacy compatibility
  ACTIVITY                       // Legacy compatibility
  CUSTOM                         // User-defined sections
  
  // Timeline Operations
  TIMELINE_GAP                   // Auto-generated gap filler
  TIMELINE_INTRO                 // Auto-generated intro
  TIMELINE_CONCLUSION            // Auto-generated conclusion
  TIMELINE_TRANSITION            // Auto-generated transition
}

enum AccumulatorType {
  BOOLEAN
  CONFIDENCE
  FLOAT
}

enum ConfidenceLevel {
  HIGH
  MEDIUM
  LOW
  NONE
}

enum CombinationType {
  ADD
  MULTIPLY
  OR
  AND
  WEIGHTEDAVG
}

enum LLMTaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
  SKIPPED
}

enum WorkflowStatus {
  NOT_STARTED
  PDF_CONVERTING
  GENERATING_OVERRIDES
  AWAITING_OVERRIDE_REVIEW
  IMPORTING_OVERRIDES
  PHASE1_PROCESSING
  PHASE2_PROCESSING
  GENERATING_MARKERS_1
  AWAITING_MARKER1_REVIEW
  IMPORTING_MARKERS_1
  PHASE3_PROCESSING
  GENERATING_MARKERS_2
  AWAITING_MARKER2_REVIEW
  IMPORTING_MARKERS_2
  COMPLETED
  ERROR
  PAUSED
  IN_PROGRESS
}

enum MarkerSource {
  MANUAL              // User-created
  AUTO_EVENT          // Generated from events (e.g., witness called)
  AUTO_PATTERN        // Generated from pattern matching
  LLM_EXTRACTION      // Generated by LLM
  IMPORT              // Imported from override file
  TIMELINE_GENERATED  // Generated by timeline operations
  PHASE3_HIERARCHY    // Generated by Phase 3 hierarchy builder
  PHASE3_DISCOVERY    // Generated by Phase 3 discovery algorithms
  PHASE3_ZEROLENGTH   // Zero-length sections for missing components
}

enum MarkerTimelineType {
  STANDARD_TRIAL      // Standard trial sequence
  SESSION_BASED       // Session-based timeline
  WITNESS_BASED       // Witness testimony timeline
  EXAMINATION_BASED   // Examination sequence timeline
  OBJECTION_BASED     // Objection sequence timeline
  FLATTENED           // Derived from flattening operation
  SUPERIMPOSED        // Derived from superimposition
  SUMMARIZED          // Derived from summarization
  CUSTOM              // User-defined timeline
}

enum GapFillingStrategy {
  NONE                // No gap filling
  SIMPLE              // Simple numbered gaps
  CONTEXTUAL          // Context-aware naming
  LLM_GENERATED       // LLM-generated descriptions
}

enum GenerationType {
  GAP_FILLER          // Fills gap between sections
  INTRO_FILLER        // Fills beginning before first section
  CONCLUSION_FILLER   // Fills end after last section
  TRANSITION          // Transition between major sections
}

enum TimelineTemplateType {
  GAP                 // Template for gaps
  INTRO               // Template for introduction
  CONCLUSION          // Template for conclusion
  TRANSITION          // Template for transitions
  SECTION_NAME        // Template for section naming
}
